/**
 * MIT License
 *
 * Copyright (c) 2017-2019 Elena Lakhno
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
[
  {
    "id": "HttpTrigger-Java",
    "metadata": {
      "name": "HttpTrigger",
      "description": "$HttpTriggerJava_description",
      "defaultFunctionName": "httpTriggerJava",
      "language": "Java",
      "userPrompt": [
        "authLevel"
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport java.util.*;\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with HTTP trigger.\n */\npublic class $className$ {\n    /**\n     * This function will listen at HTTP endpoint \"/api/$functionName$\". Two approaches to invoke it using \"curl\" command in bash:\n     *   1. curl -d \"Http Body\" {your host}/api/$functionName$\n     *   2. curl {your host}/api/$functionName$?name=HTTP%20Query\n     */\n    @FunctionName(\"$functionName$\")\n    public HttpResponseMessage<String> httpHandler(\n        @HttpTrigger(name = \"req\", methods = { \"get\", \"post\" }, authLevel = AuthorizationLevel.$authLevel$) HttpRequestMessage<Optional<String>> request,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java HTTP trigger processed a request.\");\n\n        // Parse query parameters\n        String query = request.getQueryParameters().get(\"name\");\n        String name = request.getBody().orElse(query);\n\n        if (name == null) {\n            return request.createResponse(400, \"Please pass a name on the query string or in the request body\");\n        } else {\n            return request.createResponse(200, \"Hello, \" + name);\n        }\n    }\n}\n"
    }
  },
  {
    "id": "BlobTrigger-Java",
    "metadata": {
      "name": "BlobTrigger",
      "description": "$BlobTriggerJava_description",
      "defaultFunctionName": "blobTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connection",
        "path"
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Azure Blob trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new or updated blob is detected at the specified path. The blob contents are provided as input to this function.\n     */\n    @FunctionName(\"$functionName$\")\n    @StorageAccount(\"$connection$\")\n    public void blobHandler(\n        @BlobTrigger(name = \"content\", path = \"$path$\", dataType = \"binary\") byte[] content,\n        @BindingName(\"name\") String name,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Blob trigger function processed a blob. Name: \" + name + \"\\n  Size: \" + content.length + \" Bytes\");\n    }\n}\n"
    }
  },
  {
    "id": "QueueTrigger-Java",
    "metadata": {
      "name": "QueueTrigger",
      "description": "$QueueTriggerJava_description",
      "defaultFunctionName": "queueTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connection",
        "queueName"
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Azure Storage Queue trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new message is received at the specified path. The message contents are provided as input to this function.\n     */\n    @FunctionName(\"$functionName$\")\n    public void queueHandler(\n        @QueueTrigger(name = \"message\", queueName = \"$queueName$\", connection = \"$connection$\") String message,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Queue trigger function processed a message: \" + message);\n    }\n}\n"
    }
  },
  {
    "id": "TimerTrigger-Java",
    "metadata": {
      "name": "TimerTrigger",
      "description": "$TimerTriggerJava_description",
      "defaultFunctionName": "timerTriggerJava",
      "language": "Java",
      "userPrompt": [
        "schedule"
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport java.time.*;\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Timer trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked periodically according to the specified schedule.\n     */\n    @FunctionName(\"$functionName$\")\n    public void timerHandler(\n        @TimerTrigger(name = \"timerInfo\", schedule = \"$schedule$\") String timerInfo,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Timer trigger function executed at: \" + LocalDateTime.now());\n    }\n}\n"
    }
  }
]
